// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	foods "foodcal/business/foods"

	mock "github.com/stretchr/testify/mock"
)

// FoodRepoInterface is an autogenerated mock type for the FoodRepoInterface type
type FoodRepoInterface struct {
	mock.Mock
}

// DeleteFood provides a mock function with given fields: id
func (_m *FoodRepoInterface) DeleteFood(id uint) (string, error) {
	ret := _m.Called(id)

	var r0 string
	if rf, ok := ret.Get(0).(func(uint) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllFoods provides a mock function with given fields:
func (_m *FoodRepoInterface) GetAllFoods() ([]foods.Domain, error) {
	ret := _m.Called()

	var r0 []foods.Domain
	if rf, ok := ret.Get(0).(func() []foods.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]foods.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertFood provides a mock function with given fields: domain
func (_m *FoodRepoInterface) InsertFood(domain *foods.Domain) (foods.Domain, error) {
	ret := _m.Called(domain)

	var r0 foods.Domain
	if rf, ok := ret.Get(0).(func(*foods.Domain) foods.Domain); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Get(0).(foods.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*foods.Domain) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFood provides a mock function with given fields: id, domain
func (_m *FoodRepoInterface) UpdateFood(id uint, domain *foods.Domain) (foods.Domain, error) {
	ret := _m.Called(id, domain)

	var r0 foods.Domain
	if rf, ok := ret.Get(0).(func(uint, *foods.Domain) foods.Domain); ok {
		r0 = rf(id, domain)
	} else {
		r0 = ret.Get(0).(foods.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, *foods.Domain) error); ok {
		r1 = rf(id, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
