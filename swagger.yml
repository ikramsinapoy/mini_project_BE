openapi: 3.0.0
info:
  title: Sample API
  description: Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.
  version: 1.0.0
servers:
  - url: http://api.example.com/v1
    description: Optional server description, e.g. Main (production) server
  - url: http://staging-api.example.com
    description: Optional server description, e.g. Internal staging server for testing
tags:
  - name: customer
    description: Everything about Users
  - name: food
    description: Everything about Food
  - name: admin
    description: Everything about admin
  - name: transaction
    description: Everything about transaction
paths:
  /customer/register:
    post:
      tags:
        - customer
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        '200':
          description: Register Succes
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: Registration Success
                  data:
                    type: object
                    allOf:
                      - $ref: "#/components/schemas/UserCreated"
                    properties:
                      username:
                        type: string
                        example: daffabarin123
                    
        '400':
          description: Invalid Request Body
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: Please fill all field correctly
                    
        '409':
          description: Duplicate Entry
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: Username/Email already used
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
  /customer/login:
    post:
      tags:
        - customer
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          required: true
          schema:
            type: string
        - name: password
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfull operation 
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: Login Successfull
        '401':
          description: Unathorized User 
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: Username or Password mismatched
  /food:
    get:
      tags:
        - food
      summary: Show food
      description: This can show all food.
      operationId: showAll Food
      responses:
        '200':
          description: Success 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShowFood'
  /food/{id}:
    get:
      tags:
          - food
      summary: Get food by id
      description: Get food by id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Get food by id Success 
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Food"
  /food/{category}:
    get:
      tags:
          - food
      summary: Get food by category
      description: Get food by category
      parameters:
        - in: path
          name: category
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: show food by category Success 
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShowFood"
  /admin/login:
    post:
      tags:
        - admin
      summary: Logs admin into the system
      parameters:
        - name: username
          in: query
          required: true
          schema:
            type: string
        - name: password
          in: query
          required: true
          schema:
            type: string
        - name: email
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Login Success 
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: Success Login
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImRhZmZhYmFyaW4xMjMiLCJpYXQiOjE1MTYyMzkwMjJ9.leHsuyLIuB0-SJD_sU2gd2uuK1ykSxuOtM0JU2ZEdNY
        '401':
          description: Unathorized Admin
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: Username or Password mismatched
  /admin/food:
    post:
      tags:
        - admin
      summary: Post food to menu
      description: Post food to menu
      responses:
        '200':
          description: Post food to menu Success 
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Food"
        '404':
          description: Media not found
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "invalid media_id, media not found"
        '409':
          description: Duplicate Entry
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "invalid media_id, media already in watchlist"
  /admin/food/{id_makanan}:
    put:
      tags:
          - admin
      summary: Edit value of food
      description: Edit value of food
      parameters:
        - in: path
          name: id_makanan
          schema:
            type: integer
          required: true

      responses:
        '200':
          description: Success 
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Food"
    delete:
      tags:
          - admin
      summary: Delete value of food
      description: Delete value of food
      parameters:
        - in: path
          name: id_makanan
          schema:
            type: integer
          required: true

      responses:
        '200':
          description: Success 
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Food"
  /transaction:
    post:
      tags:
        - transaction
      summary: make a transaction
      description: make a transaction
      responses:
        '200':
          description: make a transaction Success 
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShowTransaction"
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
          example: ikramsinapoy
        alamat:
          type: string
          example: Jl.brigjen katamso
        phone:
          type: string
          example: 085298924733
        password:
          type: string
          example: alterra123
        email:
          type: string
          example: ikramsinapoy@gmail.com
        dob:
          type: string
          example: 05-09-2000 
    UserCreated:
      type: object
      properties:
        created_at:
          type: "string"
          example: "2021-10-19T00:00:00"
        updated_at:
          type: "string"
          example: "2021-10-19T00:00:00"
    Food:
      type: "object"
      properties:
        id_makanan:
          type: integer
          format: int64
        nama:
          type: string
          example: chicken roasted
        harga:  
          type: string
          example: $30
        description:  
          type: string
          example: chicken that grilled with secret flavour
        categories:  
          type: string
          example: food
        restaurant:  
          type: string
          example: KFC
        calories:
          type: string
          example: 300
    Transaction:
      type: object
      properties:
        nama:
          type: string
          example: chicken roasted
        harga:  
          type: string
          example: $30
        total qty:  
          type: string
          example: 5
    ShowFood:
      type: "array"
      items:
        $ref: "#/components/schemas/Food"
    ObjTransaction:
      type: "array"
      items:
        $ref: "#/components/schemas/Transaction"
    ShowTransaction:
      type: object
      properties:
        cart:
          $ref: "#/components/schemas/ObjTransaction"
        total price:
          type: string
          example: $550
        created_at:
          type: "string"
          example: "2021-10-19T00:00:00"
        updated_at:
          type: "string"
          example: "2021-10-19T00:00:00"
  requestBodies:
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true